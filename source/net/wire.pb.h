// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#ifndef PROTOBUF_wire_2eproto__INCLUDED
#define PROTOBUF_wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace wire {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wire_2eproto();
void protobuf_AssignDesc_wire_2eproto();
void protobuf_ShutdownFile_wire_2eproto();

class ClientQuickUpdate;
class ServerQuickUpdate;
class ServerQuickUpdate_PlayerUpdate;
class Chunk;
class Object;
class Map;

// ===================================================================

class ClientQuickUpdate : public ::google::protobuf::Message {
 public:
  ClientQuickUpdate();
  virtual ~ClientQuickUpdate();
  
  ClientQuickUpdate(const ClientQuickUpdate& from);
  
  inline ClientQuickUpdate& operator=(const ClientQuickUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientQuickUpdate& default_instance();
  
  void Swap(ClientQuickUpdate* other);
  
  // implements Message ----------------------------------------------
  
  ClientQuickUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientQuickUpdate& from);
  void MergeFrom(const ClientQuickUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required sint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required sint32 angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);
  
  // required float velocityX = 5;
  inline bool has_velocityx() const;
  inline void clear_velocityx();
  static const int kVelocityXFieldNumber = 5;
  inline float velocityx() const;
  inline void set_velocityx(float value);
  
  // required float velocityY = 6;
  inline bool has_velocityy() const;
  inline void clear_velocityy();
  static const int kVelocityYFieldNumber = 6;
  inline float velocityy() const;
  inline void set_velocityy(float value);
  
  // @@protoc_insertion_point(class_scope:wire.ClientQuickUpdate)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_velocityx();
  inline void clear_has_velocityx();
  inline void set_has_velocityy();
  inline void clear_has_velocityy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 angle_;
  float velocityx_;
  float velocityy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static ClientQuickUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ServerQuickUpdate_PlayerUpdate : public ::google::protobuf::Message {
 public:
  ServerQuickUpdate_PlayerUpdate();
  virtual ~ServerQuickUpdate_PlayerUpdate();
  
  ServerQuickUpdate_PlayerUpdate(const ServerQuickUpdate_PlayerUpdate& from);
  
  inline ServerQuickUpdate_PlayerUpdate& operator=(const ServerQuickUpdate_PlayerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerQuickUpdate_PlayerUpdate& default_instance();
  
  void Swap(ServerQuickUpdate_PlayerUpdate* other);
  
  // implements Message ----------------------------------------------
  
  ServerQuickUpdate_PlayerUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerQuickUpdate_PlayerUpdate& from);
  void MergeFrom(const ServerQuickUpdate_PlayerUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // required .wire.ClientQuickUpdate update = 2;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 2;
  inline const ::wire::ClientQuickUpdate& update() const;
  inline ::wire::ClientQuickUpdate* mutable_update();
  inline ::wire::ClientQuickUpdate* release_update();
  
  // @@protoc_insertion_point(class_scope:wire.ServerQuickUpdate.PlayerUpdate)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_update();
  inline void clear_has_update();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::wire::ClientQuickUpdate* update_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static ServerQuickUpdate_PlayerUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ServerQuickUpdate : public ::google::protobuf::Message {
 public:
  ServerQuickUpdate();
  virtual ~ServerQuickUpdate();
  
  ServerQuickUpdate(const ServerQuickUpdate& from);
  
  inline ServerQuickUpdate& operator=(const ServerQuickUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerQuickUpdate& default_instance();
  
  void Swap(ServerQuickUpdate* other);
  
  // implements Message ----------------------------------------------
  
  ServerQuickUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerQuickUpdate& from);
  void MergeFrom(const ServerQuickUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ServerQuickUpdate_PlayerUpdate PlayerUpdate;
  
  // accessors -------------------------------------------------------
  
  // repeated .wire.ServerQuickUpdate.PlayerUpdate updates = 1;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 1;
  inline const ::wire::ServerQuickUpdate_PlayerUpdate& updates(int index) const;
  inline ::wire::ServerQuickUpdate_PlayerUpdate* mutable_updates(int index);
  inline ::wire::ServerQuickUpdate_PlayerUpdate* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::wire::ServerQuickUpdate_PlayerUpdate >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::wire::ServerQuickUpdate_PlayerUpdate >*
      mutable_updates();
  
  // @@protoc_insertion_point(class_scope:wire.ServerQuickUpdate)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::wire::ServerQuickUpdate_PlayerUpdate > updates_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static ServerQuickUpdate* default_instance_;
};
// -------------------------------------------------------------------

class Chunk : public ::google::protobuf::Message {
 public:
  Chunk();
  virtual ~Chunk();
  
  Chunk(const Chunk& from);
  
  inline Chunk& operator=(const Chunk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Chunk& default_instance();
  
  void Swap(Chunk* other);
  
  // implements Message ----------------------------------------------
  
  Chunk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Chunk& from);
  void MergeFrom(const Chunk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required sint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // optional bytes tiles = 3;
  inline bool has_tiles() const;
  inline void clear_tiles();
  static const int kTilesFieldNumber = 3;
  inline const ::std::string& tiles() const;
  inline void set_tiles(const ::std::string& value);
  inline void set_tiles(const char* value);
  inline void set_tiles(const void* value, size_t size);
  inline ::std::string* mutable_tiles();
  inline ::std::string* release_tiles();
  
  // optional bytes metadata = 4;
  inline bool has_metadata() const;
  inline void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  inline const ::std::string& metadata() const;
  inline void set_metadata(const ::std::string& value);
  inline void set_metadata(const char* value);
  inline void set_metadata(const void* value, size_t size);
  inline ::std::string* mutable_metadata();
  inline ::std::string* release_metadata();
  
  // @@protoc_insertion_point(class_scope:wire.Chunk)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_tiles();
  inline void clear_has_tiles();
  inline void set_has_metadata();
  inline void clear_has_metadata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::std::string* tiles_;
  ::std::string* metadata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static Chunk* default_instance_;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message {
 public:
  Object();
  virtual ~Object();
  
  Object(const Object& from);
  
  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();
  
  void Swap(Object* other);
  
  // implements Message ----------------------------------------------
  
  Object* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required sint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);
  
  // required sint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);
  
  // required sint32 angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline ::google::protobuf::int32 angle() const;
  inline void set_angle(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:wire.Object)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_angle();
  inline void clear_has_angle();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 angle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static Object* default_instance_;
};
// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message {
 public:
  Map();
  virtual ~Map();
  
  Map(const Map& from);
  
  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();
  
  void Swap(Map* other);
  
  // implements Message ----------------------------------------------
  
  Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .wire.Chunk chunks = 1;
  inline int chunks_size() const;
  inline void clear_chunks();
  static const int kChunksFieldNumber = 1;
  inline const ::wire::Chunk& chunks(int index) const;
  inline ::wire::Chunk* mutable_chunks(int index);
  inline ::wire::Chunk* add_chunks();
  inline const ::google::protobuf::RepeatedPtrField< ::wire::Chunk >&
      chunks() const;
  inline ::google::protobuf::RepeatedPtrField< ::wire::Chunk >*
      mutable_chunks();
  
  // repeated .wire.Object objects = 2;
  inline int objects_size() const;
  inline void clear_objects();
  static const int kObjectsFieldNumber = 2;
  inline const ::wire::Object& objects(int index) const;
  inline ::wire::Object* mutable_objects(int index);
  inline ::wire::Object* add_objects();
  inline const ::google::protobuf::RepeatedPtrField< ::wire::Object >&
      objects() const;
  inline ::google::protobuf::RepeatedPtrField< ::wire::Object >*
      mutable_objects();
  
  // @@protoc_insertion_point(class_scope:wire.Map)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::wire::Chunk > chunks_;
  ::google::protobuf::RepeatedPtrField< ::wire::Object > objects_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static Map* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientQuickUpdate

// required sint32 x = 1;
inline bool ClientQuickUpdate::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientQuickUpdate::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientQuickUpdate::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientQuickUpdate::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 ClientQuickUpdate::x() const {
  return x_;
}
inline void ClientQuickUpdate::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required sint32 y = 2;
inline bool ClientQuickUpdate::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientQuickUpdate::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientQuickUpdate::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientQuickUpdate::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 ClientQuickUpdate::y() const {
  return y_;
}
inline void ClientQuickUpdate::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required sint32 angle = 3;
inline bool ClientQuickUpdate::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientQuickUpdate::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientQuickUpdate::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientQuickUpdate::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline ::google::protobuf::int32 ClientQuickUpdate::angle() const {
  return angle_;
}
inline void ClientQuickUpdate::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
}

// required float velocityX = 5;
inline bool ClientQuickUpdate::has_velocityx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientQuickUpdate::set_has_velocityx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientQuickUpdate::clear_has_velocityx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientQuickUpdate::clear_velocityx() {
  velocityx_ = 0;
  clear_has_velocityx();
}
inline float ClientQuickUpdate::velocityx() const {
  return velocityx_;
}
inline void ClientQuickUpdate::set_velocityx(float value) {
  set_has_velocityx();
  velocityx_ = value;
}

// required float velocityY = 6;
inline bool ClientQuickUpdate::has_velocityy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientQuickUpdate::set_has_velocityy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientQuickUpdate::clear_has_velocityy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientQuickUpdate::clear_velocityy() {
  velocityy_ = 0;
  clear_has_velocityy();
}
inline float ClientQuickUpdate::velocityy() const {
  return velocityy_;
}
inline void ClientQuickUpdate::set_velocityy(float value) {
  set_has_velocityy();
  velocityy_ = value;
}

// -------------------------------------------------------------------

// ServerQuickUpdate_PlayerUpdate

// required uint32 playerID = 1;
inline bool ServerQuickUpdate_PlayerUpdate::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerQuickUpdate_PlayerUpdate::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 ServerQuickUpdate_PlayerUpdate::playerid() const {
  return playerid_;
}
inline void ServerQuickUpdate_PlayerUpdate::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .wire.ClientQuickUpdate update = 2;
inline bool ServerQuickUpdate_PlayerUpdate::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerQuickUpdate_PlayerUpdate::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_update() {
  if (update_ != NULL) update_->::wire::ClientQuickUpdate::Clear();
  clear_has_update();
}
inline const ::wire::ClientQuickUpdate& ServerQuickUpdate_PlayerUpdate::update() const {
  return update_ != NULL ? *update_ : *default_instance_->update_;
}
inline ::wire::ClientQuickUpdate* ServerQuickUpdate_PlayerUpdate::mutable_update() {
  set_has_update();
  if (update_ == NULL) update_ = new ::wire::ClientQuickUpdate;
  return update_;
}
inline ::wire::ClientQuickUpdate* ServerQuickUpdate_PlayerUpdate::release_update() {
  clear_has_update();
  ::wire::ClientQuickUpdate* temp = update_;
  update_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ServerQuickUpdate

// repeated .wire.ServerQuickUpdate.PlayerUpdate updates = 1;
inline int ServerQuickUpdate::updates_size() const {
  return updates_.size();
}
inline void ServerQuickUpdate::clear_updates() {
  updates_.Clear();
}
inline const ::wire::ServerQuickUpdate_PlayerUpdate& ServerQuickUpdate::updates(int index) const {
  return updates_.Get(index);
}
inline ::wire::ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate::mutable_updates(int index) {
  return updates_.Mutable(index);
}
inline ::wire::ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate::add_updates() {
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wire::ServerQuickUpdate_PlayerUpdate >&
ServerQuickUpdate::updates() const {
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::wire::ServerQuickUpdate_PlayerUpdate >*
ServerQuickUpdate::mutable_updates() {
  return &updates_;
}

// -------------------------------------------------------------------

// Chunk

// required sint32 x = 1;
inline bool Chunk::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chunk::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chunk::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chunk::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Chunk::x() const {
  return x_;
}
inline void Chunk::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required sint32 y = 2;
inline bool Chunk::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Chunk::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Chunk::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Chunk::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Chunk::y() const {
  return y_;
}
inline void Chunk::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// optional bytes tiles = 3;
inline bool Chunk::has_tiles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Chunk::set_has_tiles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Chunk::clear_has_tiles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Chunk::clear_tiles() {
  if (tiles_ != &::google::protobuf::internal::kEmptyString) {
    tiles_->clear();
  }
  clear_has_tiles();
}
inline const ::std::string& Chunk::tiles() const {
  return *tiles_;
}
inline void Chunk::set_tiles(const ::std::string& value) {
  set_has_tiles();
  if (tiles_ == &::google::protobuf::internal::kEmptyString) {
    tiles_ = new ::std::string;
  }
  tiles_->assign(value);
}
inline void Chunk::set_tiles(const char* value) {
  set_has_tiles();
  if (tiles_ == &::google::protobuf::internal::kEmptyString) {
    tiles_ = new ::std::string;
  }
  tiles_->assign(value);
}
inline void Chunk::set_tiles(const void* value, size_t size) {
  set_has_tiles();
  if (tiles_ == &::google::protobuf::internal::kEmptyString) {
    tiles_ = new ::std::string;
  }
  tiles_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chunk::mutable_tiles() {
  set_has_tiles();
  if (tiles_ == &::google::protobuf::internal::kEmptyString) {
    tiles_ = new ::std::string;
  }
  return tiles_;
}
inline ::std::string* Chunk::release_tiles() {
  clear_has_tiles();
  if (tiles_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tiles_;
    tiles_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes metadata = 4;
inline bool Chunk::has_metadata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Chunk::set_has_metadata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Chunk::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Chunk::clear_metadata() {
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    metadata_->clear();
  }
  clear_has_metadata();
}
inline const ::std::string& Chunk::metadata() const {
  return *metadata_;
}
inline void Chunk::set_metadata(const ::std::string& value) {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  metadata_->assign(value);
}
inline void Chunk::set_metadata(const char* value) {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  metadata_->assign(value);
}
inline void Chunk::set_metadata(const void* value, size_t size) {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  metadata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Chunk::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    metadata_ = new ::std::string;
  }
  return metadata_;
}
inline ::std::string* Chunk::release_metadata() {
  clear_has_metadata();
  if (metadata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = metadata_;
    metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Object

// required sint32 x = 1;
inline bool Object::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Object::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Object::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Object::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Object::x() const {
  return x_;
}
inline void Object::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required sint32 y = 2;
inline bool Object::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Object::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Object::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Object::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Object::y() const {
  return y_;
}
inline void Object::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required sint32 angle = 3;
inline bool Object::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Object::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Object::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Object::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline ::google::protobuf::int32 Object::angle() const {
  return angle_;
}
inline void Object::set_angle(::google::protobuf::int32 value) {
  set_has_angle();
  angle_ = value;
}

// -------------------------------------------------------------------

// Map

// repeated .wire.Chunk chunks = 1;
inline int Map::chunks_size() const {
  return chunks_.size();
}
inline void Map::clear_chunks() {
  chunks_.Clear();
}
inline const ::wire::Chunk& Map::chunks(int index) const {
  return chunks_.Get(index);
}
inline ::wire::Chunk* Map::mutable_chunks(int index) {
  return chunks_.Mutable(index);
}
inline ::wire::Chunk* Map::add_chunks() {
  return chunks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wire::Chunk >&
Map::chunks() const {
  return chunks_;
}
inline ::google::protobuf::RepeatedPtrField< ::wire::Chunk >*
Map::mutable_chunks() {
  return &chunks_;
}

// repeated .wire.Object objects = 2;
inline int Map::objects_size() const {
  return objects_.size();
}
inline void Map::clear_objects() {
  objects_.Clear();
}
inline const ::wire::Object& Map::objects(int index) const {
  return objects_.Get(index);
}
inline ::wire::Object* Map::mutable_objects(int index) {
  return objects_.Mutable(index);
}
inline ::wire::Object* Map::add_objects() {
  return objects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::wire::Object >&
Map::objects() const {
  return objects_;
}
inline ::google::protobuf::RepeatedPtrField< ::wire::Object >*
Map::mutable_objects() {
  return &objects_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wire

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_2eproto__INCLUDED
