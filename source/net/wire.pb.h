// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#ifndef PROTOBUF_wire_2eproto__INCLUDED
#define PROTOBUF_wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wire_2eproto();
void protobuf_AssignDesc_wire_2eproto();
void protobuf_ShutdownFile_wire_2eproto();

class ClientQuickUpdate;
class ServerQuickUpdate;
class ServerQuickUpdate_PlayerUpdate;
class ServerPlayerIDHandshake;

// ===================================================================

class ClientQuickUpdate : public ::google::protobuf::Message {
 public:
  ClientQuickUpdate();
  virtual ~ClientQuickUpdate();
  
  ClientQuickUpdate(const ClientQuickUpdate& from);
  
  inline ClientQuickUpdate& operator=(const ClientQuickUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientQuickUpdate& default_instance();
  
  void Swap(ClientQuickUpdate* other);
  
  // implements Message ----------------------------------------------
  
  ClientQuickUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientQuickUpdate& from);
  void MergeFrom(const ClientQuickUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required double angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline double angle() const;
  inline void set_angle(double value);
  
  // required double velocityX = 4;
  inline bool has_velocityx() const;
  inline void clear_velocityx();
  static const int kVelocityXFieldNumber = 4;
  inline double velocityx() const;
  inline void set_velocityx(double value);
  
  // required double velocityY = 5;
  inline bool has_velocityy() const;
  inline void clear_velocityy();
  static const int kVelocityYFieldNumber = 5;
  inline double velocityy() const;
  inline void set_velocityy(double value);
  
  // @@protoc_insertion_point(class_scope:ClientQuickUpdate)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_velocityx();
  inline void clear_has_velocityx();
  inline void set_has_velocityy();
  inline void clear_has_velocityy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double angle_;
  double velocityx_;
  double velocityy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static ClientQuickUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ServerQuickUpdate_PlayerUpdate : public ::google::protobuf::Message {
 public:
  ServerQuickUpdate_PlayerUpdate();
  virtual ~ServerQuickUpdate_PlayerUpdate();
  
  ServerQuickUpdate_PlayerUpdate(const ServerQuickUpdate_PlayerUpdate& from);
  
  inline ServerQuickUpdate_PlayerUpdate& operator=(const ServerQuickUpdate_PlayerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerQuickUpdate_PlayerUpdate& default_instance();
  
  void Swap(ServerQuickUpdate_PlayerUpdate* other);
  
  // implements Message ----------------------------------------------
  
  ServerQuickUpdate_PlayerUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerQuickUpdate_PlayerUpdate& from);
  void MergeFrom(const ServerQuickUpdate_PlayerUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // required .ClientQuickUpdate update = 2;
  inline bool has_update() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 2;
  inline const ::ClientQuickUpdate& update() const;
  inline ::ClientQuickUpdate* mutable_update();
  inline ::ClientQuickUpdate* release_update();
  
  // @@protoc_insertion_point(class_scope:ServerQuickUpdate.PlayerUpdate)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_update();
  inline void clear_has_update();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::ClientQuickUpdate* update_;
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static ServerQuickUpdate_PlayerUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ServerQuickUpdate : public ::google::protobuf::Message {
 public:
  ServerQuickUpdate();
  virtual ~ServerQuickUpdate();
  
  ServerQuickUpdate(const ServerQuickUpdate& from);
  
  inline ServerQuickUpdate& operator=(const ServerQuickUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerQuickUpdate& default_instance();
  
  void Swap(ServerQuickUpdate* other);
  
  // implements Message ----------------------------------------------
  
  ServerQuickUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerQuickUpdate& from);
  void MergeFrom(const ServerQuickUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ServerQuickUpdate_PlayerUpdate PlayerUpdate;
  
  // accessors -------------------------------------------------------
  
  // repeated .ServerQuickUpdate.PlayerUpdate updates = 1;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 1;
  inline const ::ServerQuickUpdate_PlayerUpdate& updates(int index) const;
  inline ::ServerQuickUpdate_PlayerUpdate* mutable_updates(int index);
  inline ::ServerQuickUpdate_PlayerUpdate* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerQuickUpdate_PlayerUpdate >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerQuickUpdate_PlayerUpdate >*
      mutable_updates();
  
  // @@protoc_insertion_point(class_scope:ServerQuickUpdate)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ServerQuickUpdate_PlayerUpdate > updates_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static ServerQuickUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ServerPlayerIDHandshake : public ::google::protobuf::Message {
 public:
  ServerPlayerIDHandshake();
  virtual ~ServerPlayerIDHandshake();
  
  ServerPlayerIDHandshake(const ServerPlayerIDHandshake& from);
  
  inline ServerPlayerIDHandshake& operator=(const ServerPlayerIDHandshake& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerPlayerIDHandshake& default_instance();
  
  void Swap(ServerPlayerIDHandshake* other);
  
  // implements Message ----------------------------------------------
  
  ServerPlayerIDHandshake* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerPlayerIDHandshake& from);
  void MergeFrom(const ServerPlayerIDHandshake& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::uint32 playerid() const;
  inline void set_playerid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ServerPlayerIDHandshake)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 playerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();
  
  void InitAsDefaultInstance();
  static ServerPlayerIDHandshake* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientQuickUpdate

// required double x = 1;
inline bool ClientQuickUpdate::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientQuickUpdate::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientQuickUpdate::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientQuickUpdate::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double ClientQuickUpdate::x() const {
  return x_;
}
inline void ClientQuickUpdate::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool ClientQuickUpdate::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientQuickUpdate::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientQuickUpdate::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientQuickUpdate::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double ClientQuickUpdate::y() const {
  return y_;
}
inline void ClientQuickUpdate::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double angle = 3;
inline bool ClientQuickUpdate::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientQuickUpdate::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientQuickUpdate::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientQuickUpdate::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double ClientQuickUpdate::angle() const {
  return angle_;
}
inline void ClientQuickUpdate::set_angle(double value) {
  set_has_angle();
  angle_ = value;
}

// required double velocityX = 4;
inline bool ClientQuickUpdate::has_velocityx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientQuickUpdate::set_has_velocityx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientQuickUpdate::clear_has_velocityx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientQuickUpdate::clear_velocityx() {
  velocityx_ = 0;
  clear_has_velocityx();
}
inline double ClientQuickUpdate::velocityx() const {
  return velocityx_;
}
inline void ClientQuickUpdate::set_velocityx(double value) {
  set_has_velocityx();
  velocityx_ = value;
}

// required double velocityY = 5;
inline bool ClientQuickUpdate::has_velocityy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientQuickUpdate::set_has_velocityy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientQuickUpdate::clear_has_velocityy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientQuickUpdate::clear_velocityy() {
  velocityy_ = 0;
  clear_has_velocityy();
}
inline double ClientQuickUpdate::velocityy() const {
  return velocityy_;
}
inline void ClientQuickUpdate::set_velocityy(double value) {
  set_has_velocityy();
  velocityy_ = value;
}

// -------------------------------------------------------------------

// ServerQuickUpdate_PlayerUpdate

// required uint32 playerID = 1;
inline bool ServerQuickUpdate_PlayerUpdate::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerQuickUpdate_PlayerUpdate::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 ServerQuickUpdate_PlayerUpdate::playerid() const {
  return playerid_;
}
inline void ServerQuickUpdate_PlayerUpdate::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}

// required .ClientQuickUpdate update = 2;
inline bool ServerQuickUpdate_PlayerUpdate::has_update() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerQuickUpdate_PlayerUpdate::set_has_update() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_has_update() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerQuickUpdate_PlayerUpdate::clear_update() {
  if (update_ != NULL) update_->::ClientQuickUpdate::Clear();
  clear_has_update();
}
inline const ::ClientQuickUpdate& ServerQuickUpdate_PlayerUpdate::update() const {
  return update_ != NULL ? *update_ : *default_instance_->update_;
}
inline ::ClientQuickUpdate* ServerQuickUpdate_PlayerUpdate::mutable_update() {
  set_has_update();
  if (update_ == NULL) update_ = new ::ClientQuickUpdate;
  return update_;
}
inline ::ClientQuickUpdate* ServerQuickUpdate_PlayerUpdate::release_update() {
  clear_has_update();
  ::ClientQuickUpdate* temp = update_;
  update_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ServerQuickUpdate

// repeated .ServerQuickUpdate.PlayerUpdate updates = 1;
inline int ServerQuickUpdate::updates_size() const {
  return updates_.size();
}
inline void ServerQuickUpdate::clear_updates() {
  updates_.Clear();
}
inline const ::ServerQuickUpdate_PlayerUpdate& ServerQuickUpdate::updates(int index) const {
  return updates_.Get(index);
}
inline ::ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate::mutable_updates(int index) {
  return updates_.Mutable(index);
}
inline ::ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate::add_updates() {
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerQuickUpdate_PlayerUpdate >&
ServerQuickUpdate::updates() const {
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerQuickUpdate_PlayerUpdate >*
ServerQuickUpdate::mutable_updates() {
  return &updates_;
}

// -------------------------------------------------------------------

// ServerPlayerIDHandshake

// required uint32 playerID = 1;
inline bool ServerPlayerIDHandshake::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerPlayerIDHandshake::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerPlayerIDHandshake::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerPlayerIDHandshake::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
inline ::google::protobuf::uint32 ServerPlayerIDHandshake::playerid() const {
  return playerid_;
}
inline void ServerPlayerIDHandshake::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_2eproto__INCLUDED
