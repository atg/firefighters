// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wire.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wire {

namespace {

const ::google::protobuf::Descriptor* ClientQuickUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientQuickUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerQuickUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerQuickUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerQuickUpdate_PlayerUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerQuickUpdate_PlayerUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Team_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Team_reflection_ = NULL;
const ::google::protobuf::Descriptor* Score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Score_reflection_ = NULL;
const ::google::protobuf::Descriptor* Score_MetaPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Score_MetaPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Chunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Chunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* Object_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Object_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wire_2eproto() {
  protobuf_AddDesc_wire_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wire.proto");
  GOOGLE_CHECK(file != NULL);
  ClientQuickUpdate_descriptor_ = file->message_type(0);
  static const int ClientQuickUpdate_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, velocityx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, velocityy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, isfiringflamethrower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, viewportx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, viewporty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, viewportwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, viewportheight_),
  };
  ClientQuickUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientQuickUpdate_descriptor_,
      ClientQuickUpdate::default_instance_,
      ClientQuickUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientQuickUpdate));
  ServerQuickUpdate_descriptor_ = file->message_type(1);
  static const int ServerQuickUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate, updates_),
  };
  ServerQuickUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerQuickUpdate_descriptor_,
      ServerQuickUpdate::default_instance_,
      ServerQuickUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerQuickUpdate));
  ServerQuickUpdate_PlayerUpdate_descriptor_ = ServerQuickUpdate_descriptor_->nested_type(0);
  static const int ServerQuickUpdate_PlayerUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, update_),
  };
  ServerQuickUpdate_PlayerUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerQuickUpdate_PlayerUpdate_descriptor_,
      ServerQuickUpdate_PlayerUpdate::default_instance_,
      ServerQuickUpdate_PlayerUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerQuickUpdate_PlayerUpdate));
  Team_descriptor_ = file->message_type(2);
  static const int Team_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, tickets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, members_),
  };
  Team_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Team_descriptor_,
      Team::default_instance_,
      Team_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Team, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Team));
  Score_descriptor_ = file->message_type(3);
  static const int Score_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, blu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, metaplayers_),
  };
  Score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Score_descriptor_,
      Score::default_instance_,
      Score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Score));
  Score_MetaPlayer_descriptor_ = Score_descriptor_->nested_type(0);
  static const int Score_MetaPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score_MetaPlayer, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score_MetaPlayer, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score_MetaPlayer, deaths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score_MetaPlayer, health_),
  };
  Score_MetaPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Score_MetaPlayer_descriptor_,
      Score_MetaPlayer::default_instance_,
      Score_MetaPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score_MetaPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score_MetaPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Score_MetaPlayer));
  Chunk_descriptor_ = file->message_type(4);
  static const int Chunk_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, tiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, metadata_),
  };
  Chunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Chunk_descriptor_,
      Chunk::default_instance_,
      Chunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Chunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Chunk));
  Object_descriptor_ = file->message_type(5);
  static const int Object_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, angle_),
  };
  Object_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Object_descriptor_,
      Object::default_instance_,
      Object_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Object, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Object));
  ServerUpdate_descriptor_ = file->message_type(6);
  static const int ServerUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdate, chunks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdate, objects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdate, score_),
  };
  ServerUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerUpdate_descriptor_,
      ServerUpdate::default_instance_,
      ServerUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wire_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientQuickUpdate_descriptor_, &ClientQuickUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerQuickUpdate_descriptor_, &ServerQuickUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerQuickUpdate_PlayerUpdate_descriptor_, &ServerQuickUpdate_PlayerUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Team_descriptor_, &Team::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Score_descriptor_, &Score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Score_MetaPlayer_descriptor_, &Score_MetaPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Chunk_descriptor_, &Chunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Object_descriptor_, &Object::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerUpdate_descriptor_, &ServerUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wire_2eproto() {
  delete ClientQuickUpdate::default_instance_;
  delete ClientQuickUpdate_reflection_;
  delete ServerQuickUpdate::default_instance_;
  delete ServerQuickUpdate_reflection_;
  delete ServerQuickUpdate_PlayerUpdate::default_instance_;
  delete ServerQuickUpdate_PlayerUpdate_reflection_;
  delete Team::default_instance_;
  delete Team_reflection_;
  delete Score::default_instance_;
  delete Score_reflection_;
  delete Score_MetaPlayer::default_instance_;
  delete Score_MetaPlayer_reflection_;
  delete Chunk::default_instance_;
  delete Chunk_reflection_;
  delete Object::default_instance_;
  delete Object_reflection_;
  delete ServerUpdate::default_instance_;
  delete ServerUpdate_reflection_;
}

void protobuf_AddDesc_wire_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nwire.proto\022\004wire\"\321\001\n\021ClientQuickUpdate"
    "\022\t\n\001x\030\001 \002(\021\022\t\n\001y\030\002 \002(\021\022\r\n\005angle\030\003 \002(\002\022\021\n"
    "\tvelocityX\030\004 \002(\002\022\021\n\tvelocityY\030\005 \002(\002\022\034\n\024i"
    "sFiringFlamethrower\030\006 \002(\010\022\021\n\tviewportX\030\007"
    " \001(\021\022\021\n\tviewportY\030\010 \001(\021\022\025\n\rviewportWidth"
    "\030\t \001(\021\022\026\n\016viewportHeight\030\n \001(\021\"\225\001\n\021Serve"
    "rQuickUpdate\0225\n\007updates\030\001 \003(\0132$.wire.Ser"
    "verQuickUpdate.PlayerUpdate\032I\n\014PlayerUpd"
    "ate\022\020\n\010playerID\030\001 \002(\r\022\'\n\006update\030\002 \002(\0132\027."
    "wire.ClientQuickUpdate\",\n\004Team\022\017\n\007ticket"
    "s\030\001 \002(\005\022\023\n\007members\030\002 \003(\005B\002\020\001\"\267\001\n\005Score\022\027"
    "\n\003red\030\001 \002(\0132\n.wire.Team\022\027\n\003blu\030\002 \002(\0132\n.w"
    "ire.Team\022+\n\013metaplayers\030\003 \003(\0132\026.wire.Sco"
    "re.MetaPlayer\032O\n\nMetaPlayer\022\022\n\nidentifie"
    "r\030\001 \002(\005\022\r\n\005kills\030\002 \001(\005\022\016\n\006deaths\030\003 \001(\005\022\016"
    "\n\006health\030\004 \001(\005\"O\n\005Chunk\022\t\n\001x\030\001 \002(\021\022\t\n\001y\030"
    "\002 \002(\021\022\017\n\007version\030\003 \002(\005\022\r\n\005tiles\030\004 \001(\014\022\020\n"
    "\010metadata\030\005 \001(\014\"-\n\006Object\022\t\n\001x\030\001 \002(\021\022\t\n\001"
    "y\030\002 \002(\021\022\r\n\005angle\030\003 \002(\021\"f\n\014ServerUpdate\022\033"
    "\n\006chunks\030\001 \003(\0132\013.wire.Chunk\022\035\n\007objects\030\002"
    " \003(\0132\014.wire.Object\022\032\n\005score\030\003 \001(\0132\013.wire"
    ".Score", 846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wire.proto", &protobuf_RegisterTypes);
  ClientQuickUpdate::default_instance_ = new ClientQuickUpdate();
  ServerQuickUpdate::default_instance_ = new ServerQuickUpdate();
  ServerQuickUpdate_PlayerUpdate::default_instance_ = new ServerQuickUpdate_PlayerUpdate();
  Team::default_instance_ = new Team();
  Score::default_instance_ = new Score();
  Score_MetaPlayer::default_instance_ = new Score_MetaPlayer();
  Chunk::default_instance_ = new Chunk();
  Object::default_instance_ = new Object();
  ServerUpdate::default_instance_ = new ServerUpdate();
  ClientQuickUpdate::default_instance_->InitAsDefaultInstance();
  ServerQuickUpdate::default_instance_->InitAsDefaultInstance();
  ServerQuickUpdate_PlayerUpdate::default_instance_->InitAsDefaultInstance();
  Team::default_instance_->InitAsDefaultInstance();
  Score::default_instance_->InitAsDefaultInstance();
  Score_MetaPlayer::default_instance_->InitAsDefaultInstance();
  Chunk::default_instance_->InitAsDefaultInstance();
  Object::default_instance_->InitAsDefaultInstance();
  ServerUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wire_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wire_2eproto {
  StaticDescriptorInitializer_wire_2eproto() {
    protobuf_AddDesc_wire_2eproto();
  }
} static_descriptor_initializer_wire_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ClientQuickUpdate::kXFieldNumber;
const int ClientQuickUpdate::kYFieldNumber;
const int ClientQuickUpdate::kAngleFieldNumber;
const int ClientQuickUpdate::kVelocityXFieldNumber;
const int ClientQuickUpdate::kVelocityYFieldNumber;
const int ClientQuickUpdate::kIsFiringFlamethrowerFieldNumber;
const int ClientQuickUpdate::kViewportXFieldNumber;
const int ClientQuickUpdate::kViewportYFieldNumber;
const int ClientQuickUpdate::kViewportWidthFieldNumber;
const int ClientQuickUpdate::kViewportHeightFieldNumber;
#endif  // !_MSC_VER

ClientQuickUpdate::ClientQuickUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientQuickUpdate::InitAsDefaultInstance() {
}

ClientQuickUpdate::ClientQuickUpdate(const ClientQuickUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientQuickUpdate::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  velocityx_ = 0;
  velocityy_ = 0;
  isfiringflamethrower_ = false;
  viewportx_ = 0;
  viewporty_ = 0;
  viewportwidth_ = 0;
  viewportheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientQuickUpdate::~ClientQuickUpdate() {
  SharedDtor();
}

void ClientQuickUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientQuickUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientQuickUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientQuickUpdate_descriptor_;
}

const ClientQuickUpdate& ClientQuickUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ClientQuickUpdate* ClientQuickUpdate::default_instance_ = NULL;

ClientQuickUpdate* ClientQuickUpdate::New() const {
  return new ClientQuickUpdate;
}

void ClientQuickUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    angle_ = 0;
    velocityx_ = 0;
    velocityy_ = 0;
    isfiringflamethrower_ = false;
    viewportx_ = 0;
    viewporty_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viewportwidth_ = 0;
    viewportheight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientQuickUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required sint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }
      
      // required float angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_velocityX;
        break;
      }
      
      // required float velocityX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocityX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocityx_)));
          set_has_velocityx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_velocityY;
        break;
      }
      
      // required float velocityY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocityY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocityy_)));
          set_has_velocityy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isFiringFlamethrower;
        break;
      }
      
      // required bool isFiringFlamethrower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFiringFlamethrower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfiringflamethrower_)));
          set_has_isfiringflamethrower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_viewportX;
        break;
      }
      
      // optional sint32 viewportX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewportX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &viewportx_)));
          set_has_viewportx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_viewportY;
        break;
      }
      
      // optional sint32 viewportY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewportY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &viewporty_)));
          set_has_viewporty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_viewportWidth;
        break;
      }
      
      // optional sint32 viewportWidth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewportWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &viewportwidth_)));
          set_has_viewportwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_viewportHeight;
        break;
      }
      
      // optional sint32 viewportHeight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewportHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &viewportheight_)));
          set_has_viewportheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientQuickUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }
  
  // required sint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }
  
  // required float angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }
  
  // required float velocityX = 4;
  if (has_velocityx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->velocityx(), output);
  }
  
  // required float velocityY = 5;
  if (has_velocityy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velocityy(), output);
  }
  
  // required bool isFiringFlamethrower = 6;
  if (has_isfiringflamethrower()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isfiringflamethrower(), output);
  }
  
  // optional sint32 viewportX = 7;
  if (has_viewportx()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->viewportx(), output);
  }
  
  // optional sint32 viewportY = 8;
  if (has_viewporty()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->viewporty(), output);
  }
  
  // optional sint32 viewportWidth = 9;
  if (has_viewportwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->viewportwidth(), output);
  }
  
  // optional sint32 viewportHeight = 10;
  if (has_viewportheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(10, this->viewportheight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientQuickUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }
  
  // required sint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }
  
  // required float angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }
  
  // required float velocityX = 4;
  if (has_velocityx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->velocityx(), target);
  }
  
  // required float velocityY = 5;
  if (has_velocityy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velocityy(), target);
  }
  
  // required bool isFiringFlamethrower = 6;
  if (has_isfiringflamethrower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isfiringflamethrower(), target);
  }
  
  // optional sint32 viewportX = 7;
  if (has_viewportx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->viewportx(), target);
  }
  
  // optional sint32 viewportY = 8;
  if (has_viewporty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->viewporty(), target);
  }
  
  // optional sint32 viewportWidth = 9;
  if (has_viewportwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->viewportwidth(), target);
  }
  
  // optional sint32 viewportHeight = 10;
  if (has_viewportheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(10, this->viewportheight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientQuickUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // required sint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
    // required float angle = 3;
    if (has_angle()) {
      total_size += 1 + 4;
    }
    
    // required float velocityX = 4;
    if (has_velocityx()) {
      total_size += 1 + 4;
    }
    
    // required float velocityY = 5;
    if (has_velocityy()) {
      total_size += 1 + 4;
    }
    
    // required bool isFiringFlamethrower = 6;
    if (has_isfiringflamethrower()) {
      total_size += 1 + 1;
    }
    
    // optional sint32 viewportX = 7;
    if (has_viewportx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->viewportx());
    }
    
    // optional sint32 viewportY = 8;
    if (has_viewporty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->viewporty());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sint32 viewportWidth = 9;
    if (has_viewportwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->viewportwidth());
    }
    
    // optional sint32 viewportHeight = 10;
    if (has_viewportheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->viewportheight());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientQuickUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientQuickUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientQuickUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientQuickUpdate::MergeFrom(const ClientQuickUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_velocityx()) {
      set_velocityx(from.velocityx());
    }
    if (from.has_velocityy()) {
      set_velocityy(from.velocityy());
    }
    if (from.has_isfiringflamethrower()) {
      set_isfiringflamethrower(from.isfiringflamethrower());
    }
    if (from.has_viewportx()) {
      set_viewportx(from.viewportx());
    }
    if (from.has_viewporty()) {
      set_viewporty(from.viewporty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viewportwidth()) {
      set_viewportwidth(from.viewportwidth());
    }
    if (from.has_viewportheight()) {
      set_viewportheight(from.viewportheight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientQuickUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientQuickUpdate::CopyFrom(const ClientQuickUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientQuickUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void ClientQuickUpdate::Swap(ClientQuickUpdate* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(velocityx_, other->velocityx_);
    std::swap(velocityy_, other->velocityy_);
    std::swap(isfiringflamethrower_, other->isfiringflamethrower_);
    std::swap(viewportx_, other->viewportx_);
    std::swap(viewporty_, other->viewporty_);
    std::swap(viewportwidth_, other->viewportwidth_);
    std::swap(viewportheight_, other->viewportheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientQuickUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientQuickUpdate_descriptor_;
  metadata.reflection = ClientQuickUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerQuickUpdate_PlayerUpdate::kPlayerIDFieldNumber;
const int ServerQuickUpdate_PlayerUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

ServerQuickUpdate_PlayerUpdate::ServerQuickUpdate_PlayerUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerQuickUpdate_PlayerUpdate::InitAsDefaultInstance() {
  update_ = const_cast< ::wire::ClientQuickUpdate*>(&::wire::ClientQuickUpdate::default_instance());
}

ServerQuickUpdate_PlayerUpdate::ServerQuickUpdate_PlayerUpdate(const ServerQuickUpdate_PlayerUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerQuickUpdate_PlayerUpdate::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  update_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerQuickUpdate_PlayerUpdate::~ServerQuickUpdate_PlayerUpdate() {
  SharedDtor();
}

void ServerQuickUpdate_PlayerUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
  }
}

void ServerQuickUpdate_PlayerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerQuickUpdate_PlayerUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerQuickUpdate_PlayerUpdate_descriptor_;
}

const ServerQuickUpdate_PlayerUpdate& ServerQuickUpdate_PlayerUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate_PlayerUpdate::default_instance_ = NULL;

ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate_PlayerUpdate::New() const {
  return new ServerQuickUpdate_PlayerUpdate;
}

void ServerQuickUpdate_PlayerUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_update()) {
      if (update_ != NULL) update_->::wire::ClientQuickUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerQuickUpdate_PlayerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update;
        break;
      }
      
      // required .wire.ClientQuickUpdate update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerQuickUpdate_PlayerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // required .wire.ClientQuickUpdate update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerQuickUpdate_PlayerUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // required .wire.ClientQuickUpdate update = 2;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerQuickUpdate_PlayerUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .wire.ClientQuickUpdate update = 2;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerQuickUpdate_PlayerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerQuickUpdate_PlayerUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerQuickUpdate_PlayerUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerQuickUpdate_PlayerUpdate::MergeFrom(const ServerQuickUpdate_PlayerUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_update()) {
      mutable_update()->::wire::ClientQuickUpdate::MergeFrom(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerQuickUpdate_PlayerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQuickUpdate_PlayerUpdate::CopyFrom(const ServerQuickUpdate_PlayerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQuickUpdate_PlayerUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_update()) {
    if (!this->update().IsInitialized()) return false;
  }
  return true;
}

void ServerQuickUpdate_PlayerUpdate::Swap(ServerQuickUpdate_PlayerUpdate* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerQuickUpdate_PlayerUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerQuickUpdate_PlayerUpdate_descriptor_;
  metadata.reflection = ServerQuickUpdate_PlayerUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerQuickUpdate::kUpdatesFieldNumber;
#endif  // !_MSC_VER

ServerQuickUpdate::ServerQuickUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerQuickUpdate::InitAsDefaultInstance() {
}

ServerQuickUpdate::ServerQuickUpdate(const ServerQuickUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerQuickUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerQuickUpdate::~ServerQuickUpdate() {
  SharedDtor();
}

void ServerQuickUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerQuickUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerQuickUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerQuickUpdate_descriptor_;
}

const ServerQuickUpdate& ServerQuickUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ServerQuickUpdate* ServerQuickUpdate::default_instance_ = NULL;

ServerQuickUpdate* ServerQuickUpdate::New() const {
  return new ServerQuickUpdate;
}

void ServerQuickUpdate::Clear() {
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerQuickUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .wire.ServerQuickUpdate.PlayerUpdate updates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerQuickUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .wire.ServerQuickUpdate.PlayerUpdate updates = 1;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerQuickUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .wire.ServerQuickUpdate.PlayerUpdate updates = 1;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerQuickUpdate::ByteSize() const {
  int total_size = 0;
  
  // repeated .wire.ServerQuickUpdate.PlayerUpdate updates = 1;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerQuickUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerQuickUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerQuickUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerQuickUpdate::MergeFrom(const ServerQuickUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerQuickUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQuickUpdate::CopyFrom(const ServerQuickUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQuickUpdate::IsInitialized() const {
  
  for (int i = 0; i < updates_size(); i++) {
    if (!this->updates(i).IsInitialized()) return false;
  }
  return true;
}

void ServerQuickUpdate::Swap(ServerQuickUpdate* other) {
  if (other != this) {
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerQuickUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerQuickUpdate_descriptor_;
  metadata.reflection = ServerQuickUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Team::kTicketsFieldNumber;
const int Team::kMembersFieldNumber;
#endif  // !_MSC_VER

Team::Team()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Team::InitAsDefaultInstance() {
}

Team::Team(const Team& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Team::SharedCtor() {
  _cached_size_ = 0;
  tickets_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Team::~Team() {
  SharedDtor();
}

void Team::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Team::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Team_descriptor_;
}

const Team& Team::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

Team* Team::default_instance_ = NULL;

Team* Team::New() const {
  return new Team;
}

void Team::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tickets_ = 0;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tickets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tickets_)));
          set_has_tickets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }
      
      // repeated int32 members = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tickets = 1;
  if (has_tickets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tickets(), output);
  }
  
  // repeated int32 members = 2 [packed = true];
  if (this->members_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_members_cached_byte_size_);
  }
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->members(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Team::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tickets = 1;
  if (has_tickets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tickets(), target);
  }
  
  // repeated int32 members = 2 [packed = true];
  if (this->members_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _members_cached_byte_size_, target);
  }
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->members(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Team::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tickets = 1;
    if (has_tickets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tickets());
    }
    
  }
  // repeated int32 members = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->members(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _members_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Team::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Team* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Team*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Team::MergeFrom(const Team& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tickets()) {
      set_tickets(from.tickets());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Team::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Team::CopyFrom(const Team& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Team::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Team::Swap(Team* other) {
  if (other != this) {
    std::swap(tickets_, other->tickets_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Team::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Team_descriptor_;
  metadata.reflection = Team_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Score_MetaPlayer::kIdentifierFieldNumber;
const int Score_MetaPlayer::kKillsFieldNumber;
const int Score_MetaPlayer::kDeathsFieldNumber;
const int Score_MetaPlayer::kHealthFieldNumber;
#endif  // !_MSC_VER

Score_MetaPlayer::Score_MetaPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Score_MetaPlayer::InitAsDefaultInstance() {
}

Score_MetaPlayer::Score_MetaPlayer(const Score_MetaPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Score_MetaPlayer::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = 0;
  kills_ = 0;
  deaths_ = 0;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score_MetaPlayer::~Score_MetaPlayer() {
  SharedDtor();
}

void Score_MetaPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Score_MetaPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score_MetaPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_MetaPlayer_descriptor_;
}

const Score_MetaPlayer& Score_MetaPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

Score_MetaPlayer* Score_MetaPlayer::default_instance_ = NULL;

Score_MetaPlayer* Score_MetaPlayer::New() const {
  return new Score_MetaPlayer;
}

void Score_MetaPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identifier_ = 0;
    kills_ = 0;
    deaths_ = 0;
    health_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Score_MetaPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identifier_)));
          set_has_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kills;
        break;
      }
      
      // optional int32 kills = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deaths;
        break;
      }
      
      // optional int32 deaths = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deaths:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deaths_)));
          set_has_deaths();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_health;
        break;
      }
      
      // optional int32 health = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Score_MetaPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 identifier = 1;
  if (has_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->identifier(), output);
  }
  
  // optional int32 kills = 2;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kills(), output);
  }
  
  // optional int32 deaths = 3;
  if (has_deaths()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deaths(), output);
  }
  
  // optional int32 health = 4;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->health(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Score_MetaPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 identifier = 1;
  if (has_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->identifier(), target);
  }
  
  // optional int32 kills = 2;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kills(), target);
  }
  
  // optional int32 deaths = 3;
  if (has_deaths()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deaths(), target);
  }
  
  // optional int32 health = 4;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->health(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Score_MetaPlayer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identifier());
    }
    
    // optional int32 kills = 2;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kills());
    }
    
    // optional int32 deaths = 3;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deaths());
    }
    
    // optional int32 health = 4;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score_MetaPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Score_MetaPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Score_MetaPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Score_MetaPlayer::MergeFrom(const Score_MetaPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_identifier()) {
      set_identifier(from.identifier());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_deaths()) {
      set_deaths(from.deaths());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Score_MetaPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score_MetaPlayer::CopyFrom(const Score_MetaPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score_MetaPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Score_MetaPlayer::Swap(Score_MetaPlayer* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(kills_, other->kills_);
    std::swap(deaths_, other->deaths_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Score_MetaPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Score_MetaPlayer_descriptor_;
  metadata.reflection = Score_MetaPlayer_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Score::kRedFieldNumber;
const int Score::kBluFieldNumber;
const int Score::kMetaplayersFieldNumber;
#endif  // !_MSC_VER

Score::Score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Score::InitAsDefaultInstance() {
  red_ = const_cast< ::wire::Team*>(&::wire::Team::default_instance());
  blu_ = const_cast< ::wire::Team*>(&::wire::Team::default_instance());
}

Score::Score(const Score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  red_ = NULL;
  blu_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score::~Score() {
  SharedDtor();
}

void Score::SharedDtor() {
  if (this != default_instance_) {
    delete red_;
    delete blu_;
  }
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_descriptor_;
}

const Score& Score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

Score* Score::default_instance_ = NULL;

Score* Score::New() const {
  return new Score;
}

void Score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_red()) {
      if (red_ != NULL) red_->::wire::Team::Clear();
    }
    if (has_blu()) {
      if (blu_ != NULL) blu_->::wire::Team::Clear();
    }
  }
  metaplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .wire.Team red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blu;
        break;
      }
      
      // required .wire.Team blu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_metaplayers;
        break;
      }
      
      // repeated .wire.Score.MetaPlayer metaplayers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metaplayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metaplayers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_metaplayers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .wire.Team red = 1;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red(), output);
  }
  
  // required .wire.Team blu = 2;
  if (has_blu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blu(), output);
  }
  
  // repeated .wire.Score.MetaPlayer metaplayers = 3;
  for (int i = 0; i < this->metaplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->metaplayers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .wire.Team red = 1;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red(), target);
  }
  
  // required .wire.Team blu = 2;
  if (has_blu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blu(), target);
  }
  
  // repeated .wire.Score.MetaPlayer metaplayers = 3;
  for (int i = 0; i < this->metaplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->metaplayers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Score::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .wire.Team red = 1;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->red());
    }
    
    // required .wire.Team blu = 2;
    if (has_blu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blu());
    }
    
  }
  // repeated .wire.Score.MetaPlayer metaplayers = 3;
  total_size += 1 * this->metaplayers_size();
  for (int i = 0; i < this->metaplayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metaplayers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
  GOOGLE_CHECK_NE(&from, this);
  metaplayers_.MergeFrom(from.metaplayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red()) {
      mutable_red()->::wire::Team::MergeFrom(from.red());
    }
    if (from.has_blu()) {
      mutable_blu()->::wire::Team::MergeFrom(from.blu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_red()) {
    if (!this->red().IsInitialized()) return false;
  }
  if (has_blu()) {
    if (!this->blu().IsInitialized()) return false;
  }
  for (int i = 0; i < metaplayers_size(); i++) {
    if (!this->metaplayers(i).IsInitialized()) return false;
  }
  return true;
}

void Score::Swap(Score* other) {
  if (other != this) {
    std::swap(red_, other->red_);
    std::swap(blu_, other->blu_);
    metaplayers_.Swap(&other->metaplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Score_descriptor_;
  metadata.reflection = Score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Chunk::kXFieldNumber;
const int Chunk::kYFieldNumber;
const int Chunk::kVersionFieldNumber;
const int Chunk::kTilesFieldNumber;
const int Chunk::kMetadataFieldNumber;
#endif  // !_MSC_VER

Chunk::Chunk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Chunk::InitAsDefaultInstance() {
}

Chunk::Chunk(const Chunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Chunk::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  version_ = 0;
  tiles_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  metadata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Chunk::~Chunk() {
  SharedDtor();
}

void Chunk::SharedDtor() {
  if (tiles_ != &::google::protobuf::internal::kEmptyString) {
    delete tiles_;
  }
  if (metadata_ != &::google::protobuf::internal::kEmptyString) {
    delete metadata_;
  }
  if (this != default_instance_) {
  }
}

void Chunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Chunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Chunk_descriptor_;
}

const Chunk& Chunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

Chunk* Chunk::default_instance_ = NULL;

Chunk* Chunk::New() const {
  return new Chunk;
}

void Chunk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    version_ = 0;
    if (has_tiles()) {
      if (tiles_ != &::google::protobuf::internal::kEmptyString) {
        tiles_->clear();
      }
    }
    if (has_metadata()) {
      if (metadata_ != &::google::protobuf::internal::kEmptyString) {
        metadata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Chunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required sint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }
      
      // required int32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tiles;
        break;
      }
      
      // optional bytes tiles = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tiles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_metadata;
        break;
      }
      
      // optional bytes metadata = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Chunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }
  
  // required sint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }
  
  // required int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }
  
  // optional bytes tiles = 4;
  if (has_tiles()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->tiles(), output);
  }
  
  // optional bytes metadata = 5;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->metadata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Chunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }
  
  // required sint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }
  
  // required int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }
  
  // optional bytes tiles = 4;
  if (has_tiles()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->tiles(), target);
  }
  
  // optional bytes metadata = 5;
  if (has_metadata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->metadata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Chunk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // required sint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
    // required int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
    // optional bytes tiles = 4;
    if (has_tiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tiles());
    }
    
    // optional bytes metadata = 5;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->metadata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Chunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Chunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Chunk::MergeFrom(const Chunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_tiles()) {
      set_tiles(from.tiles());
    }
    if (from.has_metadata()) {
      set_metadata(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Chunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chunk::CopyFrom(const Chunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Chunk::Swap(Chunk* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(version_, other->version_);
    std::swap(tiles_, other->tiles_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Chunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Chunk_descriptor_;
  metadata.reflection = Chunk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Object::kXFieldNumber;
const int Object::kYFieldNumber;
const int Object::kAngleFieldNumber;
#endif  // !_MSC_VER

Object::Object()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Object::InitAsDefaultInstance() {
}

Object::Object(const Object& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Object::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Object::~Object() {
  SharedDtor();
}

void Object::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Object::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Object::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Object_descriptor_;
}

const Object& Object::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

Object* Object::default_instance_ = NULL;

Object* Object::New() const {
  return new Object;
}

void Object::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Object::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }
      
      // required sint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_angle;
        break;
      }
      
      // required sint32 angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Object::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required sint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->x(), output);
  }
  
  // required sint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->y(), output);
  }
  
  // required sint32 angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->angle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Object::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required sint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->x(), target);
  }
  
  // required sint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->y(), target);
  }
  
  // required sint32 angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->angle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Object::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x());
    }
    
    // required sint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y());
    }
    
    // required sint32 angle = 3;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->angle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Object* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Object*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Object::MergeFrom(const Object& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Object::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Object::CopyFrom(const Object& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Object::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Object::Swap(Object* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Object::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Object_descriptor_;
  metadata.reflection = Object_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerUpdate::kChunksFieldNumber;
const int ServerUpdate::kObjectsFieldNumber;
const int ServerUpdate::kScoreFieldNumber;
#endif  // !_MSC_VER

ServerUpdate::ServerUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerUpdate::InitAsDefaultInstance() {
  score_ = const_cast< ::wire::Score*>(&::wire::Score::default_instance());
}

ServerUpdate::ServerUpdate(const ServerUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerUpdate::SharedCtor() {
  _cached_size_ = 0;
  score_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerUpdate::~ServerUpdate() {
  SharedDtor();
}

void ServerUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete score_;
  }
}

void ServerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerUpdate_descriptor_;
}

const ServerUpdate& ServerUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ServerUpdate* ServerUpdate::default_instance_ = NULL;

ServerUpdate* ServerUpdate::New() const {
  return new ServerUpdate;
}

void ServerUpdate::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_score()) {
      if (score_ != NULL) score_->::wire::Score::Clear();
    }
  }
  chunks_.Clear();
  objects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .wire.Chunk chunks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chunks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chunks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chunks;
        if (input->ExpectTag(18)) goto parse_objects;
        break;
      }
      
      // repeated .wire.Object objects = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_objects;
        if (input->ExpectTag(26)) goto parse_score;
        break;
      }
      
      // optional .wire.Score score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .wire.Chunk chunks = 1;
  for (int i = 0; i < this->chunks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chunks(i), output);
  }
  
  // repeated .wire.Object objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objects(i), output);
  }
  
  // optional .wire.Score score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .wire.Chunk chunks = 1;
  for (int i = 0; i < this->chunks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chunks(i), target);
  }
  
  // repeated .wire.Object objects = 2;
  for (int i = 0; i < this->objects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objects(i), target);
  }
  
  // optional .wire.Score score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .wire.Score score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score());
    }
    
  }
  // repeated .wire.Chunk chunks = 1;
  total_size += 1 * this->chunks_size();
  for (int i = 0; i < this->chunks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chunks(i));
  }
  
  // repeated .wire.Object objects = 2;
  total_size += 1 * this->objects_size();
  for (int i = 0; i < this->objects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objects(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerUpdate::MergeFrom(const ServerUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  chunks_.MergeFrom(from.chunks_);
  objects_.MergeFrom(from.objects_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_score()) {
      mutable_score()->::wire::Score::MergeFrom(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerUpdate::CopyFrom(const ServerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUpdate::IsInitialized() const {
  
  for (int i = 0; i < chunks_size(); i++) {
    if (!this->chunks(i).IsInitialized()) return false;
  }
  for (int i = 0; i < objects_size(); i++) {
    if (!this->objects(i).IsInitialized()) return false;
  }
  if (has_score()) {
    if (!this->score().IsInitialized()) return false;
  }
  return true;
}

void ServerUpdate::Swap(ServerUpdate* other) {
  if (other != this) {
    chunks_.Swap(&other->chunks_);
    objects_.Swap(&other->objects_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerUpdate_descriptor_;
  metadata.reflection = ServerUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wire

// @@protoc_insertion_point(global_scope)
