// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wire.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ClientQuickUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientQuickUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerQuickUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerQuickUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerQuickUpdate_PlayerUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerQuickUpdate_PlayerUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerPlayerIDHandshake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerPlayerIDHandshake_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wire_2eproto() {
  protobuf_AddDesc_wire_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wire.proto");
  GOOGLE_CHECK(file != NULL);
  ClientQuickUpdate_descriptor_ = file->message_type(0);
  static const int ClientQuickUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, velocityx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, velocityy_),
  };
  ClientQuickUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientQuickUpdate_descriptor_,
      ClientQuickUpdate::default_instance_,
      ClientQuickUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQuickUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientQuickUpdate));
  ServerQuickUpdate_descriptor_ = file->message_type(1);
  static const int ServerQuickUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate, updates_),
  };
  ServerQuickUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerQuickUpdate_descriptor_,
      ServerQuickUpdate::default_instance_,
      ServerQuickUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerQuickUpdate));
  ServerQuickUpdate_PlayerUpdate_descriptor_ = ServerQuickUpdate_descriptor_->nested_type(0);
  static const int ServerQuickUpdate_PlayerUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, update_),
  };
  ServerQuickUpdate_PlayerUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerQuickUpdate_PlayerUpdate_descriptor_,
      ServerQuickUpdate_PlayerUpdate::default_instance_,
      ServerQuickUpdate_PlayerUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerQuickUpdate_PlayerUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerQuickUpdate_PlayerUpdate));
  ServerPlayerIDHandshake_descriptor_ = file->message_type(2);
  static const int ServerPlayerIDHandshake_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPlayerIDHandshake, playerid_),
  };
  ServerPlayerIDHandshake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerPlayerIDHandshake_descriptor_,
      ServerPlayerIDHandshake::default_instance_,
      ServerPlayerIDHandshake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPlayerIDHandshake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerPlayerIDHandshake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerPlayerIDHandshake));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wire_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientQuickUpdate_descriptor_, &ClientQuickUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerQuickUpdate_descriptor_, &ServerQuickUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerQuickUpdate_PlayerUpdate_descriptor_, &ServerQuickUpdate_PlayerUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerPlayerIDHandshake_descriptor_, &ServerPlayerIDHandshake::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wire_2eproto() {
  delete ClientQuickUpdate::default_instance_;
  delete ClientQuickUpdate_reflection_;
  delete ServerQuickUpdate::default_instance_;
  delete ServerQuickUpdate_reflection_;
  delete ServerQuickUpdate_PlayerUpdate::default_instance_;
  delete ServerQuickUpdate_PlayerUpdate_reflection_;
  delete ServerPlayerIDHandshake::default_instance_;
  delete ServerPlayerIDHandshake_reflection_;
}

void protobuf_AddDesc_wire_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nwire.proto\"^\n\021ClientQuickUpdate\022\t\n\001x\030\001"
    " \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005angle\030\003 \002(\001\022\021\n\tveloci"
    "tyX\030\004 \002(\001\022\021\n\tvelocityY\030\005 \002(\001\"\213\001\n\021ServerQ"
    "uickUpdate\0220\n\007updates\030\001 \003(\0132\037.ServerQuic"
    "kUpdate.PlayerUpdate\032D\n\014PlayerUpdate\022\020\n\010"
    "playerID\030\001 \002(\r\022\"\n\006update\030\002 \002(\0132\022.ClientQ"
    "uickUpdate\"+\n\027ServerPlayerIDHandshake\022\020\n"
    "\010playerID\030\001 \002(\r", 295);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wire.proto", &protobuf_RegisterTypes);
  ClientQuickUpdate::default_instance_ = new ClientQuickUpdate();
  ServerQuickUpdate::default_instance_ = new ServerQuickUpdate();
  ServerQuickUpdate_PlayerUpdate::default_instance_ = new ServerQuickUpdate_PlayerUpdate();
  ServerPlayerIDHandshake::default_instance_ = new ServerPlayerIDHandshake();
  ClientQuickUpdate::default_instance_->InitAsDefaultInstance();
  ServerQuickUpdate::default_instance_->InitAsDefaultInstance();
  ServerQuickUpdate_PlayerUpdate::default_instance_->InitAsDefaultInstance();
  ServerPlayerIDHandshake::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wire_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wire_2eproto {
  StaticDescriptorInitializer_wire_2eproto() {
    protobuf_AddDesc_wire_2eproto();
  }
} static_descriptor_initializer_wire_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ClientQuickUpdate::kXFieldNumber;
const int ClientQuickUpdate::kYFieldNumber;
const int ClientQuickUpdate::kAngleFieldNumber;
const int ClientQuickUpdate::kVelocityXFieldNumber;
const int ClientQuickUpdate::kVelocityYFieldNumber;
#endif  // !_MSC_VER

ClientQuickUpdate::ClientQuickUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientQuickUpdate::InitAsDefaultInstance() {
}

ClientQuickUpdate::ClientQuickUpdate(const ClientQuickUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientQuickUpdate::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  angle_ = 0;
  velocityx_ = 0;
  velocityy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientQuickUpdate::~ClientQuickUpdate() {
  SharedDtor();
}

void ClientQuickUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientQuickUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientQuickUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientQuickUpdate_descriptor_;
}

const ClientQuickUpdate& ClientQuickUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ClientQuickUpdate* ClientQuickUpdate::default_instance_ = NULL;

ClientQuickUpdate* ClientQuickUpdate::New() const {
  return new ClientQuickUpdate;
}

void ClientQuickUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    angle_ = 0;
    velocityx_ = 0;
    velocityy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientQuickUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_angle;
        break;
      }
      
      // required double angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_velocityX;
        break;
      }
      
      // required double velocityX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocityX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocityx_)));
          set_has_velocityx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_velocityY;
        break;
      }
      
      // required double velocityY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_velocityY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocityy_)));
          set_has_velocityy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientQuickUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required double angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle(), output);
  }
  
  // required double velocityX = 4;
  if (has_velocityx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->velocityx(), output);
  }
  
  // required double velocityY = 5;
  if (has_velocityy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->velocityy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientQuickUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required double angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angle(), target);
  }
  
  // required double velocityX = 4;
  if (has_velocityx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->velocityx(), target);
  }
  
  // required double velocityY = 5;
  if (has_velocityy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->velocityy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientQuickUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double angle = 3;
    if (has_angle()) {
      total_size += 1 + 8;
    }
    
    // required double velocityX = 4;
    if (has_velocityx()) {
      total_size += 1 + 8;
    }
    
    // required double velocityY = 5;
    if (has_velocityy()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientQuickUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientQuickUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientQuickUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientQuickUpdate::MergeFrom(const ClientQuickUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_velocityx()) {
      set_velocityx(from.velocityx());
    }
    if (from.has_velocityy()) {
      set_velocityy(from.velocityy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientQuickUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientQuickUpdate::CopyFrom(const ClientQuickUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientQuickUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ClientQuickUpdate::Swap(ClientQuickUpdate* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(angle_, other->angle_);
    std::swap(velocityx_, other->velocityx_);
    std::swap(velocityy_, other->velocityy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientQuickUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientQuickUpdate_descriptor_;
  metadata.reflection = ClientQuickUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerQuickUpdate_PlayerUpdate::kPlayerIDFieldNumber;
const int ServerQuickUpdate_PlayerUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

ServerQuickUpdate_PlayerUpdate::ServerQuickUpdate_PlayerUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerQuickUpdate_PlayerUpdate::InitAsDefaultInstance() {
  update_ = const_cast< ::ClientQuickUpdate*>(&::ClientQuickUpdate::default_instance());
}

ServerQuickUpdate_PlayerUpdate::ServerQuickUpdate_PlayerUpdate(const ServerQuickUpdate_PlayerUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerQuickUpdate_PlayerUpdate::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  update_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerQuickUpdate_PlayerUpdate::~ServerQuickUpdate_PlayerUpdate() {
  SharedDtor();
}

void ServerQuickUpdate_PlayerUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
  }
}

void ServerQuickUpdate_PlayerUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerQuickUpdate_PlayerUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerQuickUpdate_PlayerUpdate_descriptor_;
}

const ServerQuickUpdate_PlayerUpdate& ServerQuickUpdate_PlayerUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate_PlayerUpdate::default_instance_ = NULL;

ServerQuickUpdate_PlayerUpdate* ServerQuickUpdate_PlayerUpdate::New() const {
  return new ServerQuickUpdate_PlayerUpdate;
}

void ServerQuickUpdate_PlayerUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_update()) {
      if (update_ != NULL) update_->::ClientQuickUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerQuickUpdate_PlayerUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_update;
        break;
      }
      
      // required .ClientQuickUpdate update = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerQuickUpdate_PlayerUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // required .ClientQuickUpdate update = 2;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->update(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerQuickUpdate_PlayerUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // required .ClientQuickUpdate update = 2;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerQuickUpdate_PlayerUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required .ClientQuickUpdate update = 2;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerQuickUpdate_PlayerUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerQuickUpdate_PlayerUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerQuickUpdate_PlayerUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerQuickUpdate_PlayerUpdate::MergeFrom(const ServerQuickUpdate_PlayerUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_update()) {
      mutable_update()->::ClientQuickUpdate::MergeFrom(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerQuickUpdate_PlayerUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQuickUpdate_PlayerUpdate::CopyFrom(const ServerQuickUpdate_PlayerUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQuickUpdate_PlayerUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_update()) {
    if (!this->update().IsInitialized()) return false;
  }
  return true;
}

void ServerQuickUpdate_PlayerUpdate::Swap(ServerQuickUpdate_PlayerUpdate* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerQuickUpdate_PlayerUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerQuickUpdate_PlayerUpdate_descriptor_;
  metadata.reflection = ServerQuickUpdate_PlayerUpdate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerQuickUpdate::kUpdatesFieldNumber;
#endif  // !_MSC_VER

ServerQuickUpdate::ServerQuickUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerQuickUpdate::InitAsDefaultInstance() {
}

ServerQuickUpdate::ServerQuickUpdate(const ServerQuickUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerQuickUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerQuickUpdate::~ServerQuickUpdate() {
  SharedDtor();
}

void ServerQuickUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerQuickUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerQuickUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerQuickUpdate_descriptor_;
}

const ServerQuickUpdate& ServerQuickUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ServerQuickUpdate* ServerQuickUpdate::default_instance_ = NULL;

ServerQuickUpdate* ServerQuickUpdate::New() const {
  return new ServerQuickUpdate;
}

void ServerQuickUpdate::Clear() {
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerQuickUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerQuickUpdate.PlayerUpdate updates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_updates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerQuickUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerQuickUpdate.PlayerUpdate updates = 1;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerQuickUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerQuickUpdate.PlayerUpdate updates = 1;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerQuickUpdate::ByteSize() const {
  int total_size = 0;
  
  // repeated .ServerQuickUpdate.PlayerUpdate updates = 1;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerQuickUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerQuickUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerQuickUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerQuickUpdate::MergeFrom(const ServerQuickUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerQuickUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerQuickUpdate::CopyFrom(const ServerQuickUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerQuickUpdate::IsInitialized() const {
  
  for (int i = 0; i < updates_size(); i++) {
    if (!this->updates(i).IsInitialized()) return false;
  }
  return true;
}

void ServerQuickUpdate::Swap(ServerQuickUpdate* other) {
  if (other != this) {
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerQuickUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerQuickUpdate_descriptor_;
  metadata.reflection = ServerQuickUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerPlayerIDHandshake::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

ServerPlayerIDHandshake::ServerPlayerIDHandshake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerPlayerIDHandshake::InitAsDefaultInstance() {
}

ServerPlayerIDHandshake::ServerPlayerIDHandshake(const ServerPlayerIDHandshake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerPlayerIDHandshake::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerPlayerIDHandshake::~ServerPlayerIDHandshake() {
  SharedDtor();
}

void ServerPlayerIDHandshake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerPlayerIDHandshake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerPlayerIDHandshake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerPlayerIDHandshake_descriptor_;
}

const ServerPlayerIDHandshake& ServerPlayerIDHandshake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wire_2eproto();  return *default_instance_;
}

ServerPlayerIDHandshake* ServerPlayerIDHandshake::default_instance_ = NULL;

ServerPlayerIDHandshake* ServerPlayerIDHandshake::New() const {
  return new ServerPlayerIDHandshake;
}

void ServerPlayerIDHandshake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerPlayerIDHandshake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerPlayerIDHandshake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerPlayerIDHandshake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerPlayerIDHandshake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerPlayerIDHandshake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerPlayerIDHandshake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerPlayerIDHandshake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerPlayerIDHandshake::MergeFrom(const ServerPlayerIDHandshake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerPlayerIDHandshake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerPlayerIDHandshake::CopyFrom(const ServerPlayerIDHandshake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPlayerIDHandshake::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ServerPlayerIDHandshake::Swap(ServerPlayerIDHandshake* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerPlayerIDHandshake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerPlayerIDHandshake_descriptor_;
  metadata.reflection = ServerPlayerIDHandshake_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
